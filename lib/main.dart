import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'providers/todo_provider.dart';
import 'repositories/realtime_todo_repository.dart';
import 'repositories/todo_repository.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'screens/home_screen.dart';
import 'theme/app_theme.dart';

void main() {
  runApp(const TodoApp());
}

class TodoApp extends StatefulWidget {
  const TodoApp({super.key});

  @override
  State<TodoApp> createState() => _TodoAppState();
}

class _TodoAppState extends State<TodoApp> {
  ThemeMode _themeMode = ThemeMode.system;

  void _toggleTheme() {
    setState(() {
      _themeMode = _themeMode == ThemeMode.light 
          ? ThemeMode.dark 
          : ThemeMode.light;
    });
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: _initRepositoriesAndProvider(),
      builder: (context, snapshot) {
        // While initializing, show a blank container (app will start once provider is ready)
        if (snapshot.connectionState != ConnectionState.done) {
          return const MaterialApp(home: Scaffold(body: Center(child: CircularProgressIndicator())));
        }

        final useFirebase = snapshot.data ?? false;
  final provider = TodoProvider(repository: useFirebase ? RealtimeTodoRepository() : TodoRepository());
        // Initialize the provider asynchronously
        provider.init();

        return ChangeNotifierProvider.value(
          value: provider,
          child: MaterialApp(
            title: 'Co-op Task',
            theme: AppTheme.lightTheme,
            darkTheme: AppTheme.darkTheme,
            themeMode: _themeMode,
            home: HomeScreen(onThemeToggle: _toggleTheme),
            debugShowCheckedModeBanner: false,
          ),
        );
      },
    );
  }

  Future<bool> _initRepositoriesAndProvider() async {
    try {
      // Attempt to initialize Firebase. If it fails, we'll fall back to local storage.
      // If `lib/firebase_options.dart` has been generated by `flutterfire configure`,
      // it will provide `DefaultFirebaseOptions.currentPlatform`.
      final options = DefaultFirebaseOptions.currentPlatform;
      await Firebase.initializeApp(options: options);
      return true;
    } catch (e) {
      // Firebase not configured; log the error and continue with local repository
      // ignore: avoid_print
      print('Firebase initialization failed: $e');
      return false;
    }
  }
}
